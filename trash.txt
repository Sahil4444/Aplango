import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { signInWithEmailAndPassword } from "firebase/auth";
import { collection, query, where, getDocs } from "firebase/firestore";
import { auth, firestore } from "../../../../Database/Firebase";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Spinner } from "./Spinner";

function AdminLogin() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");

  const navigate = useNavigate();

  const handleLogin = async (e) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      const adminsRef = collection(firestore, "admins");
      const q = query(adminsRef, where("emailid", "==", email));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        setError("No admin account found with this email");
        setLoading(false);
        return;
      }

      await signInWithEmailAndPassword(auth, email, password);

      const adminDoc = querySnapshot.docs[0];
      const adminData = {
        id: adminDoc.id,
        ...adminDoc.data(),
        isAdmin: true,
      };

      localStorage.setItem("adminUser", JSON.stringify(adminData));
      navigate("/admin/dashboard");
    } catch (error) {
      console.error("Login error:", error);

      if (
        error.code === "auth/wrong-password" ||
        error.code === "auth/invalid-credential"
      ) {
        setError("Invalid email or password");
      } else if (error.code === "auth/user-not-found") {
        setError("No account found in authentication system");
      } else {
        setError("Failed to login. Please try again.");
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8">
        <div>
          <h2 className="mt-6 text-center text-3xl font-bold tracking-tight text-gray-900">
            Admin Login
          </h2>
          <p className="mt-2 text-center text-sm text-gray-600">
            Enter your credentials to access the admin dashboard
          </p>
        </div>

        {error && (
          <Alert variant="destructive" className="my-4">
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <form className="mt-8 space-y-6" onSubmit={handleLogin}>
          <div className="space-y-4 rounded-md shadow-sm">
            <div>
              <label
                htmlFor="email"
                className="block text-sm font-medium text-gray-700"
              >
                Email address
              </label>
              <Input
                id="email"
                name="email"
                type="email"
                autoComplete="email"
                required
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1"
                placeholder="admin@example.com"
              />
            </div>

            <div>
              <label
                htmlFor="password"
                className="block text-sm font-medium text-gray-700"
              >
                Password
              </label>
              <Input
                id="password"
                name="password"
                type="password"
                autoComplete="current-password"
                required
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="mt-1"
                placeholder="••••••••"
              />
            </div>
          </div>

          <div>
            <Button
              type="submit"
              className="w-full bg-indigo-600 hover:bg-indigo-700"
              disabled={loading}
            >
              {loading && <Spinner className="h-5 w-5 mr-2" />}
              {loading ? "Signing in..." : "Sign in"}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
}

export default AdminLogin;

Login package

"use client";

import { useState, useEffect } from "react";
import { motion } from "framer-motion";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import {
  EyeIcon,
  EyeOffIcon,
  Mail,
  Lock,
  Loader2,
  Phone,
  Key,
  CreditCard,
  User2,
  CircleCheckBig,
  ArrowRight,
  CheckCircle2,
  UserCheck,
  Info,
  MessageSquare,
} from "lucide-react";
import Navbar from "../Navbar/Navbar";
import { useNavigate, useLocation } from "react-router-dom";
import { toast } from "react-toastify";
import {
  signInWithEmailAndPassword,
  createUserWithEmailAndPassword,
} from "firebase/auth";
import { auth, firestore } from "../../../../Database/Firebase";
import {
  collection,
  doc,
  getDocs,
  query,
  setDoc,
  where,
} from "firebase/firestore";
import emailjs from "@emailjs/browser";

export default function AnimatedLoginForm() {
  const [isLoading, setIsLoading] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [timer, setTimer] = useState(0);
  const [flag, setFlag] = useState(false);
  const [otpLoading, setOtpLoading] = useState(false);
  const [genOtp, setGenOtp] = useState("");
  const [smsLoading, setSmsLoading] = useState(false);

  const [isCardValid, setIsCardValid] = useState(false);
  const [userExists, setUserExists] = useState(false);

  const [isOtpVerified, setIsOtpVerified] = useState(false);
  const [confirmationResult, setConfirmationResult] = useState(null);
  const [phoneVerified, setPhoneVerified] = useState(false);

  const navigate = useNavigate();
  const location = useLocation();

  const handleScrollContact = (event) => {
    event.preventDefault();

    if (location.pathname === "/") {
      window.scroll({
        top: 4150,
        left: 0,
        behavior: "smooth",
      });
    } else {
      navigate("/");
      setTimeout(() => {
        window.scrollTo({ top: 4150, behavior: "smooth" });
      }, 100);
    }
  };

  const [formData, setFormData] = useState({
    name: "",
    email: "",
    password: "",
    phone: "",
    cardId: "",
    otp: "",
  });

  useEffect(() => {
    if (timer > 0) {
      const interval = setInterval(() => {
        setTimer((prevTimer) => prevTimer - 1);
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [timer]);

  // SMS API function
  const sendSMSOTP = async (phoneNumber, otp) => {
    try {
      setSmsLoading(true);

      // Format phone number (digits only)
      const formattedPhone = phoneNumber.replace(/\D/g, "");

      // Send request to your backend
      const response = await fetch(
        `${import.meta.env.VITE_API_BASE || "http://localhost:5000"}/send-otp`,
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ phoneNumber: formattedPhone, otp }),
        }
      );

      const result = await response.json();

      if (response.ok && result.success) {
        console.log("SMS sent successfully:", result);
        return { success: true, data: result };
      } else {
        console.error("SMS sending failed:", result);
        return {
          success: false,
          error: result.message || "SMS sending failed",
        };
      }
    } catch (error) {
      console.error("Error sending SMS:", error);
      return { success: false, error: error.message };
    } finally {
      setSmsLoading(false);
    }
  };

  // Check if card ID exists in the database
  const checkCardValidity = async (cardId) => {
    try {
      const cardsRef = collection(firestore, "cards");
      const q = query(cardsRef, where("cardId", "==", cardId));
      const querySnapshot = await getDocs(q);

      const isValid = !querySnapshot.empty;

      if (isValid) {
        const cardData = querySnapshot.docs[0].data();
        console.log("Card is valid:", cardData);
        return { isValid: true, cardData };
      } else {
        alert("Card is not registered yet!");
        return { isValid: false, cardData: null };
      }
    } catch (error) {
      console.error("Error checking card validity:", error);
      alert("An error occurred while checking the card.");
      return { isValid: false, cardData: null };
    }
  };

  // Check if user exists in the database
  const checkUserExists = async (email, phone) => {
    try {
      const usersRef = collection(firestore, "users");
      const emailQuery = query(usersRef, where("email", "==", email));
      const phoneQuery = query(usersRef, where("phone", "==", phone));

      const [emailSnapshot, phoneSnapshot] = await Promise.all([
        getDocs(emailQuery),
        getDocs(phoneQuery),
      ]);

      return !emailSnapshot.empty || !phoneSnapshot.empty;
    } catch (error) {
      console.error("Error checking user existence:", error);
      return false;
    }
  };

  const handleGetOTP = async (e) => {
    e.preventDefault();
    const service_id = import.meta.env.VITE_EMAILJS_SERVICE_ID;
    const template_id = import.meta.env.VITE_EMAILJS_TEMPLATE_ID;
    const public_key = import.meta.env.VITE_EMAILJS_PUBLIC_KEY;

    if (formData.email && formData.phone) {
      setIsLoading(true);
      setFlag(true);
      setTimer(60);

      // Generate a 4-digit OTP
      const generatedOTP = Math.floor(1000 + Math.random() * 9000);
      setGenOtp(generatedOTP);

      let emailSuccess = false;
      let smsSuccess = false;

      try {
        // Send OTP via email
        const templateParams = {
          to_email: formData.email,
          to_name: formData.name,
          sentOtp: generatedOTP,
        };

        await emailjs.send(service_id, template_id, templateParams, public_key);
        emailSuccess = true;
        console.log("Email OTP sent successfully");

        // Send OTP via SMS
        const smsResult = await sendSMSOTP(formData.phone, generatedOTP);
        smsSuccess = smsResult.success;

        if (smsResult.success) {
          console.log("SMS OTP sent successfully");
        } else {
          console.error("SMS OTP failed:", smsResult.error);
        }

        // Show appropriate success/error messages
        if (emailSuccess && smsSuccess) {
          toast.success("OTP sent to both your email and phone number!", {
            position: "top-center",
          });
        } else if (emailSuccess && !smsSuccess) {
          toast.success("OTP sent to both your email and phone number!", {
            position: "top-center",
          });
        } else if (!emailSuccess && smsSuccess) {
          toast.success(
            "OTP sent to your phone. Email delivery failed - please check your email.",
            {
              position: "top-center",
            }
          );
        } else {
          toast.error(
            "Failed to send OTP via both email and SMS. Please try again.",
            {
              position: "top-center",
            }
          );
        }
      } catch (error) {
        console.error("Error sending OTP:", error);
        toast.error("Failed to send OTP. Please try again.", {
          position: "top-center",
        });
      } finally {
        setIsLoading(false);
      }
    } else {
      toast.error("Please enter both email and phone number!", {
        position: "top-center",
      });
    }
  };

  const handleValidateOtp = async (e) => {
    setOtpLoading(true);
    try {
      // Verify OTP
      const otpValid = formData.otp == genOtp;

      if (otpValid) {
        toast.success("OTP Verified Successfully!", { position: "top-center" });
        setIsOtpVerified(true);
      } else {
        toast.error("Invalid OTP. Please try again!", {
          position: "top-center",
        });
      }
    } catch (error) {
      console.error("OTP verification error:", error);
      toast.error("OTP verification failed. Please try again!", {
        position: "top-center",
      });
    } finally {
      setOtpLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      // Check if card ID exists in the database
      const { isValid } = await checkCardValidity(formData.cardId);

      if (!isValid) {
        toast.error("Card ID is not registered in our system!", {
          position: "top-center",
        });
        setIsLoading(false);
        return;
      }

      // Extract the last 6 digits of the card ID as the expected password
      const cardId = formData.cardId;
      const expectedPassword = cardId.slice(-6);
      console.log(expectedPassword);
      console.log(formData.password);
      console.log(formData.password === expectedPassword);

      if (formData.password !== expectedPassword) {
        toast.error("Incorrect password!", {
          position: "top-center",
        });
        setIsLoading(false);
        return;
      }

      const isUserExists = await checkUserExists(
        formData.email,
        formData.phone
      );
      if (isUserExists) {
        // Login user
        await signInWithEmailAndPassword(
          auth,
          formData.email,
          formData.password
        );
        toast.success("Login successful!", {
          position: "top-center",
        });
      } else {
        // Register user
        const userCredential = await createUserWithEmailAndPassword(
          auth,
          formData.email,
          formData.password
        );
        const user = userCredential.user;

        // Store user data in Firestore
        await setDoc(doc(firestore, "users", user.uid), {
          name: formData.name,
          email: formData.email,
          phone: formData.phone,
          password: formData.password,
          cardId: formData.cardId,
          createdAt: new Date(),
        });

        toast.success("Registration successful!", {
          position: "top-center",
        });
      }
      navigate("/ui");
    } catch (error) {
      console.error("Authentication error:", error);
      let errorMessage = "Authentication failed. Please try again.";

      if (error.code === "auth/email-already-in-use") {
        errorMessage =
          "Email or Phone number is already in use. Please login instead.";
      } else if (error.code === "auth/invalid-email") {
        errorMessage = "Invalid email address.";
      } else if (error.code === "auth/weak-password") {
        errorMessage = "Password is too weak. Please use a stronger password.";
      } else if (error.code === "auth/wrong-password") {
        errorMessage = "Incorrect password. Please try again.";
      } else if (error.code === "auth/user-not-found") {
        errorMessage = "User not found. Please register first.";
      } else if (error.code === "auth/invalid-credential") {
        errorMessage = "Phone number is already linked with another Email id!";
      }

      toast.error(errorMessage, {
        position: "top-center",
      });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="flex flex-col min-h-screen">
      <div className="fixed top-0 left-0 right-0 z-50 bg-white shadow-md">
        <Navbar />
      </div>
      <div className="flex-grow pt-20 bg-gradient-to-br from-purple-50 to-indigo-100">
        <div className="container mx-auto p-4 flex items-center justify-center">
          <div className="w-full max-w-6xl flex flex-col lg:flex-row rounded-xl overflow-hidden shadow-2xl">
            {/* Login Guide Container - Left Side */}
            <motion.div
              initial={{ opacity: 0, x: -50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="w-full lg:w-1/2 bg-gradient-to-br from-indigo-600 to-purple-700 p-8 text-white flex flex-col justify-center relative"
            >
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.4 }}
              >
                <h2 className="text-3xl font-bold mb-6">Welcome Back!</h2>
                <p className="text-lg mb-8 text-indigo-100">
                  Log in to access your account and continue your journey with
                  us.
                </p>
              </motion.div>

              <div className="space-y-6">
                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.4, delay: 0.6 }}
                  className="flex items-start space-x-4"
                >
                  <div className="bg-white/20 p-2 rounded-full">
                    <UserCheck className="h-6 w-6" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-xl">
                      Dual Authentication
                    </h3>
                    <p className="text-indigo-100">
                      Secure login with email and SMS OTP verification
                    </p>
                  </div>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.4, delay: 0.8 }}
                  className="flex items-start space-x-4"
                >
                  <div className="bg-white/20 p-2 rounded-full">
                    <MessageSquare className="h-6 w-6" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-xl">SMS & Email OTP</h3>
                    <p className="text-indigo-100">
                      Receive OTP on both your phone and email for better
                      security
                    </p>
                  </div>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.4, delay: 1 }}
                  className="flex items-start space-x-4"
                >
                  <div className="bg-white/20 p-2 rounded-full">
                    <CheckCircle2 className="h-6 w-6" />
                  </div>
                  <div>
                    <h3 className="font-semibold text-xl">Easy Access</h3>
                    <p className="text-indigo-100">
                      Quick access to all your account features
                    </p>
                  </div>
                </motion.div>
              </div>

              {/* Login Guide Steps */}
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 1.2 }}
                className="mt-8 bg-white/10 p-6 rounded-lg border border-white/20 backdrop-blur-sm"
              >
                <p className="font-medium text-lg mb-3 flex items-center">
                  <Info className="mr-2 h-5 w-5" /> How to Login
                </p>
                <ol className="list-decimal list-inside space-y-2 text-indigo-100">
                  <li>Enter your full name, email, and phone number</li>
                  <li>
                    Click "Get OTP" and check both your email and phone for the
                    verification code
                  </li>
                  <li>Enter the 4-digit OTP and click "Verify OTP"</li>
                  <li>
                    Enter your Card ID (the password is the last 6 digits of
                    your Card ID)
                  </li>
                  <li>Click "Sign in" to access your account</li>
                </ol>
              </motion.div>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 1.4 }}
                className="mt-8 bg-white/10 p-6 rounded-lg border border-white/20 backdrop-blur-sm"
              >
                <p className="font-medium text-lg mb-2">Need Help?</p>
                <p className="text-indigo-100 mb-4">
                  If you're having trouble logging in, please contact our
                  support team.
                </p>
                <Button
                  onClick={handleScrollContact}
                  variant="outline"
                  className="bg-transparent border-white text-white hover:bg-white hover:text-indigo-700"
                >
                  Contact Support <ArrowRight className="ml-2 h-4 w-4" />
                </Button>
              </motion.div>

              {/* Animated background elements */}
              <motion.div
                className="absolute top-20 left-10 w-20 h-20 rounded-full bg-purple-500/20 blur-xl"
                animate={{
                  x: [0, 30, 0],
                  y: [0, 20, 0],
                }}
                transition={{
                  repeat: Number.POSITIVE_INFINITY,
                  duration: 8,
                  ease: "easeInOut",
                }}
              />
              <motion.div
                className="absolute bottom-20 right-10 w-32 h-32 rounded-full bg-indigo-500/20 blur-xl"
                animate={{
                  x: [0, -40, 0],
                  y: [0, -30, 0],
                }}
                transition={{
                  repeat: Number.POSITIVE_INFINITY,
                  duration: 10,
                  ease: "easeInOut",
                }}
              />
            </motion.div>

            {/* Login Form Container - Right Side */}
            <motion.div
              initial={{ opacity: 0, x: 50 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.6, delay: 0.2 }}
              className="w-full lg:w-1/2 bg-white p-8"
            >
              <div className="w-full max-w-md mx-auto">
                <h2 className="text-3xl font-bold text-indigo-600 mb-6 text-center">
                  Login Here
                </h2>
                <Card className="backdrop-blur-sm bg-white/90 shadow-xl border-indigo-100">
                  <CardHeader className="py-3">
                    <CardTitle className="text-xl font-bold text-center">
                      Welcome Back
                    </CardTitle>
                    <CardDescription className="text-center">
                      Enter your credentials to access your account
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <form onSubmit={handleSubmit} className="space-y-3">
                      <div className="space-y-2">
                        <Label htmlFor="name">Full name</Label>
                        <div className="relative">
                          <User2 className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 h-4 w-4" />
                          <Input
                            id="name"
                            type="text"
                            placeholder="Enter your full name"
                            className="pl-10"
                            value={formData.name}
                            onChange={(e) =>
                              setFormData({ ...formData, name: e.target.value })
                            }
                            required
                          />
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="email">Email</Label>
                        <div className="relative">
                          <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 h-4 w-4" />
                          <Input
                            id="email"
                            type="email"
                            placeholder="Enter your email"
                            className="pl-10"
                            value={formData.email}
                            onChange={(e) =>
                              setFormData({
                                ...formData,
                                email: e.target.value,
                              })
                            }
                            required
                          />
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="phone">Phone number</Label>
                        <div className="relative">
                          <Phone className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 h-4 w-4" />
                          <Input
                            id="phone"
                            type="tel"
                            placeholder="Enter your phone number (10 digits)"
                            className="pl-10"
                            value={formData.phone}
                            onChange={(e) =>
                              setFormData({
                                ...formData,
                                phone: e.target.value,
                              })
                            }
                            required
                          />
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                          Enter 10-digit mobile number (without country code)
                        </p>
                      </div>

                      <div className="space-y-2">
                        <Button
                          type="button"
                          className="bg-white text-black border border-slate-500 hover:bg-indigo-500 hover:border-0 hover:text-white disabled:opacity-50 disabled:cursor-not-allowed"
                          onClick={handleGetOTP}
                          disabled={isLoading || timer > 0 || smsLoading}
                        >
                          {isLoading || smsLoading ? (
                            <>
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                              Sending OTP...
                            </>
                          ) : (
                            <>
                              <MessageSquare className="mr-2 h-4 w-4" />
                              Get OTP (Email + SMS)
                            </>
                          )}
                        </Button>
                      </div>

                      {flag && (
                        <div className="my-2 flex items-center justify-between">
                          <p className="m-0 text-sm text-gray-600">
                            {timer > 0
                              ? `Resend OTP in ${Math.floor(timer / 60)}:${(timer % 60).toString().padStart(2, "0")}`
                              : "OTP timer expired"}
                          </p>
                          {timer === 0 && (
                            <button
                              type="button"
                              className="mt-0 text-sm text-indigo-700 font-medium cursor-pointer hover:text-indigo-900 disabled:opacity-50 disabled:cursor-not-allowed"
                              onClick={handleGetOTP}
                              disabled={isLoading || smsLoading}
                            >
                              Resend OTP
                            </button>
                          )}
                        </div>
                      )}
                      <div className="space-y-2">
                        <Label htmlFor="otp">OTP</Label>
                        <div className="relative">
                          <Key className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 h-4 w-4" />
                          <Input
                            id="otp"
                            type="number"
                            placeholder="Enter 4 digit OTP sent to email & phone"
                            className="pl-10"
                            value={formData.otp}
                            onChange={(e) =>
                              setFormData({ ...formData, otp: e.target.value })
                            }
                            required
                          />
                        </div>
                      </div>
                      <div className="space-y-2">
                        <div className="relative">
                          <button
                            type="button"
                            onClick={handleValidateOtp}
                            className="text-sm flex items-center justify-center font-normal w-full bg-indigo-500 md:bg-transparent md:text-gray-700 hover:bg-indigo-500 hover:text-white md:border md:border-gray-500 py-2 rounded-sm text-white"
                            disabled={isOtpVerified || otpLoading}
                          >
                            {isOtpVerified ? (
                              <CircleCheckBig className="" />
                            ) : otpLoading ? (
                              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            ) : (
                              "Verify OTP"
                            )}
                          </button>
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="cardId">Card id</Label>
                        <div className="relative">
                          <CreditCard className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 h-4 w-4" />
                          <Input
                            id="cardId"
                            type="text"
                            placeholder="Enter your Card id"
                            className="pl-10"
                            value={formData.cardId}
                            onChange={(e) =>
                              setFormData({
                                ...formData,
                                cardId: e.target.value,
                              })
                            }
                            required
                          />
                        </div>
                      </div>

                      <div className="space-y-2">
                        <Label htmlFor="password">Password</Label>
                        <div className="relative">
                          <Lock className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 h-4 w-4" />
                          <Input
                            id="password"
                            type={showPassword ? "text" : "password"}
                            placeholder="Enter your password"
                            className="pl-10"
                            value={formData.password}
                            onChange={(e) =>
                              setFormData({
                                ...formData,
                                password: e.target.value,
                              })
                            }
                            required
                          />
                          <Button
                            type="button"
                            variant="ghost"
                            size="icon"
                            className="absolute right-0 top-0 h-full px-3 hover:bg-transparent"
                            onClick={() => setShowPassword(!showPassword)}
                          >
                            {showPassword ? (
                              <EyeOffIcon className="h-4 w-4 text-gray-500" />
                            ) : (
                              <EyeIcon className="h-4 w-4 text-gray-500" />
                            )}
                          </Button>
                        </div>
                        <p className="text-xs text-gray-500 mt-1">
                          Your password is the last 6 digits of your Card ID
                        </p>
                      </div>

                      <button
                        type="submit"
                        className="w-full bg-transparent flex items-center justify-center text-gray-700 border-2 hover:border-none hover:bg-indigo-600 hover:text-white border-gray-300 py-2 rounded-lg"
                        disabled={isLoading}
                      >
                        {isLoading ? (
                          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        ) : null}
                        {isLoading ? "Signing in..." : "Sign in"}
                      </button>
                    </form>
                  </CardContent>
                </Card>
              </div>
            </motion.div>
          </div>
        </div>
      </div>
    </div>
  );
}




Send Sms using frontend
  // SMS API function
  const sendSMSOTP = async (phoneNumber, otp) => {
    try {
      setSmsLoading(true);

      // Clean and format the phone number
      const formattedPhone = phoneNumber.replace(/\D/g, "");

      // Build the URL with query parameters
      const baseUrl =
        "https://bulk.nationalsms.in/sms-panel/api/http/index.php";
      const queryParams = new URLSearchParams({
        username: import.meta.env.VITE_SMS_USERNAME,
        apikey: import.meta.env.VITE_SMS_API_KEY,
        apirequest: "Text",
        sender: import.meta.env.VITE_SMS_SENDER_ID, // Replace with your approved Sender ID
        mobile: formattedPhone,
        message: `Dear Customer Your One-Time Password (OTP) for login is ${otp}. This code is valid for the next 5 minutes. Do not share it with anyone. Aplango Promo Services`, // Customize as needed
        route: import.meta.env.VITE_SMS_ROUTE, // Replace with your actual route, e.g. "Transactional"
        TemplateID: import.meta.env.VITE_DLT_TEMPLATE_ID, // Replace with actual DLT template ID
        format: "JSON",
      });

      const url = `${baseUrl}?${queryParams.toString()}`;

      const response = await fetch(url, {
        method: "GET",
      });

      const result = await response.json();

      if (response.ok && result.status === "success") {
        console.log("SMS sent successfully:", result);
        return { success: true, data: result };
      } else {
        console.error("SMS sending failed:", result);
        return {
          success: false,
          error: result.message || "SMS sending failed",
        };
      }
    } catch (error) {
      console.error("Error sending SMS:", error);
      return { success: false, error: error.message };
    } finally {
      setSmsLoading(false);
    }
  };

  // SMS API function cloud function
  const sendSMSOTP = async (phoneNumber, otp) => {
    try {
      setSmsLoading(true);

      // Format phone number (digits only)
      const formattedPhone = phoneNumber.replace(/\D/g, "");
      const response = await fetch(
        "https://us-central1-aplango.cloudfunctions.net/api/send-otp", // ✅ This is the full deployed URL
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ phoneNumber: formattedPhone, otp }),
        }
      );

      const result = await response.json();

      if (response.ok && result.success) {
        console.log("SMS sent successfully:", result);
        return { success: true, data: result };
      } else {
        console.error("SMS sending failed:", result);
        return {
          success: false,
          error: result.message || "SMS sending failed",
        };
      }
    } catch (error) {
      console.error("Error sending SMS:", error);
      return { success: false, error: error.message };
    } finally {
      setSmsLoading(false);
    }
  };


  Clients.jsx:
  import React from "react";
import { useLocation } from "react-router-dom";

import della from "../../../assets/clients/della.jpg";
import dine from "../../../assets/clients/dine.jpg";
import fountains from "../../../assets/clients/fountains.png";
import imagica from "../../../assets/clients/imagica.svg";
import jawed from "../../../assets/clients/jawed habib.webp";
import jazzup from "../../../assets/clients/jazzup.png";
import jd from "../../../assets/clients/jd.png";
import funcity from "../../../assets/clients/logo_funcity.png";
import pizza from "../../../assets/clients/pizza.svg";
import splash from "../../../assets/clients/splash.png";
import srl from "../../../assets/clients/srl.png.webp";
import surya from "../../../assets/clients/surya.svg";
import suzuki from "../../../assets/clients/suzuki.jpg";
import talwalkers from "../../../assets/clients/talwalkers.jpg";
import toss from "../../../assets/clients/toss.jpg";
import yamaha from "../../../assets/clients/yamaha.webp";

const clientslist = [
  {
    cl_name: 1,
    client_img: della,
  },
  {
    cl_name: 2,
    client_img: dine,
  },
  {
    cl_name: 3,
    client_img: fountains,
  },
  {
    cl_name: 4,
    client_img: imagica,
  },
  {
    cl_name: 5,
    client_img: jawed,
  },
  {
    cl_name: 6,
    client_img: jazzup,
  },
  {
    cl_name: 7,
    client_img: jd,
  },
  {
    cl_name: 8,
    client_img: funcity,
  },
  {
    cl_name: 9,
    client_img: pizza,
  },
  {
    cl_name: 10,
    client_img: splash,
  },
  {
    cl_name: 11,
    client_img: srl,
  },
  {
    cl_name: 12,
    client_img: surya,
  },
  {
    cl_name: 13,
    client_img: suzuki,
  },
  {
    cl_name: 14,
    client_img: talwalkers,
  },
  {
    cl_name: 15,
    client_img: toss,
  },
  {
    cl_name: 16,
    client_img: yamaha,
  },
];

function Clients() {
  const location = useLocation();
  return (
    <div
      className={`lg:px-10 xl:px-10 md:px-10 px-6 py-16 w-full ${
        location.pathname !== "/ui" ? "mt-0" : "mt-0"
      } md:mt-0 bg-gradient-to-br from-[#f5f7fa] to-[#c3cfe2]`}
    >
      <div className="heading flex flex-col items-center mb-10 md:mb-20">
        <h2 className="text-3xl text-center md:text-5xl xl:text-5xl font-bold text-gray-700 mb-3">
          Top Brands & <span className="text-indigo-500"> Stores</span>
        </h2>
        <p className="text-sm md:text-lg md:font-semibold font-medium text-gray-400">
          Discover the best brands and stores offering premium discounts and
          exclusive deals.
        </p>
      </div>

      {/* Content */}
      <div className="clent-list mt-10 p-10 rounded-xl flex justify-center flex-wrap items-center gap-10">
        {clientslist.map((c) => (
          <img
            key={c.cl_name}
            src={c.client_img}
            alt="Prudct image"
            className="md:w-36 w-20 mb-8"
          />
        ))}
      </div>
    </div>
  );
}

export default Clients;


Navbar.jsx:
import React, { useState, useEffect } from "react";
import { Menu, X } from "lucide-react";
import Logo from "./Logo";
import MobileDrawer from "./MobileDrawer";
import { Link } from "react-router-dom";
import { useNavigate, useLocation } from "react-router-dom";

function Navbar({ onVendorClick }) {
  const [isHomeOpen, setIsHomeOpen] = useState(false);
  const [isUiOpen, setIsUiOpen] = useState(false);
  const [isAboutOpen, setIsAboutOpen] = useState(false);
  const [isClientsOpen, setIsClientsOpen] = useState(false);
  const [isContactOpen, setIsContactOpen] = useState(false);
  const [isScrolled, setIsScrolled] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [isCareersOpen, setIsCareersOpen] = useState(false);

  const navigate = useNavigate();
  const location = useLocation();

  const handleVendorClick = () => {
    navigate('/', { state: { scrollTo: 'vendors' } });
  };

  const handleClientsClick = (event) => {
    event.preventDefault(); // Prevent default anchor behavior

    if (location.pathname === "/") {
      window.scroll({
        top: 2110, // Scroll vertically to 100 pixels
        left: 0, // Don't change horizontal position
        behavior: "smooth", // Smooth scroll
      }); // Delay to allow page transition
    } else {
      navigate("/"); // Redirect to home
      setTimeout(() => {
        window.scrollTo({ top: 2110, behavior: "smooth" }); // Scroll down smoothly
      }, 100); // Normal About Us navigation
    }
  };

  const handleCareersClick = (event) => {
    event.preventDefault();
    navigate("/careers");
  };

  const handleAboutClick = (event) => {
    event.preventDefault(); // Prevent default anchor behavior

    if (location.pathname === "/") {
      window.scroll({
        top: 3210, // Scroll vertically to 100 pixels
        left: 0, // Don't change horizontal position
        behavior: "smooth", // Smooth scroll
      }); // Delay to allow page transition
    } else {
      navigate("/"); // Redirect to home
      setTimeout(() => {
        window.scrollTo({ top: 3210, behavior: "smooth" }); // Scroll down smoothly
      }, 100); // Normal About Us navigation
    }
  };

  // const handleUiClick = (event) => {
  //   event.preventDefault(); // Prevent default anchor behavior

  //   if (location.pathname === "/Aplango/ui") {
  //     setIsOpen(false);
  //     window.scroll({
  //       top: 0, // Scroll vertically to 100 pixels
  //       left: 0, // Don't change horizontal position
  //       behavior: "smooth", // Smooth scroll
  //     }); // Delay to allow page transition
  //   } else {
  //     setIsOpen(false);
  //     navigate("/Aplango/ui"); // Redirect to home
  //     setTimeout(() => {
  //       window.scrollTo({ top: 0, behavior: "smooth" }); // Scroll down smoothly
  //     }, 100); // Normal About Us navigation
  //   }
  // };

  const handleScrollContact = (event) => {
    event.preventDefault(); // Prevent default anchor behavior

    if (location.pathname === "/") {
      window.scroll({
        top: 4150, // Scroll vertically to 100 pixels
        left: 0, // Don't change horizontal position
        behavior: "smooth", // Smooth scroll
      }); // Delay to allow page transition
    } else {
      navigate("/"); // Redirect to home
      setTimeout(() => {
        window.scrollTo({ top: 4150, behavior: "smooth" }); // Scroll down smoothly
      }, 100); // Normal About Us navigation
    }
  };

  const handleAdmin = (e) => {
    e.preventDefault();
    navigate('/admin');
  }

  const handleScrollHome = () => {
    window.scroll({
      top: 0, // Scroll vertically to 100 pixels
      left: 0, // Don't change horizontal position
      behavior: "smooth", // Smooth scroll
    });
  };

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 0);
    };
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return (
    <nav
      className={`fixed w-full z-50 transition-all duration-300 ${
        isScrolled ? "bg-white shadow-md" : "bg-transparent"
      } ${isOpen ? "bg-white" : "bg-transparent"}`}
    >
      <div className="px-4 py-2 sm:px-6 lg:px-8">
        <div className="flex items-center justify-between h-16">
          <Link onClick={handleScrollHome}>
            <Logo />
          </Link>

          <div className="hidden md:block ml-10">
            <div className="flex items-baseline justify-between gap-5 space-x-4">
              <Link
                to="/"
                onClick={handleScrollHome}
                onMouseEnter={() => setIsHomeOpen(true)}
                onMouseLeave={() => setIsHomeOpen(false)}
                className="text-gray-800 relative hover:text-indigo-600 hover:cursor-pointer px-0 py-1 rounded-md text-md font-medium"
              >
                Home
                <span
                  style={{ transform: isHomeOpen ? "scaleX(1)" : "scaleX(0)" }}
                  className="absolute origin-left -bottom-1 -left-2 -right-2 h-1 rounded-full bg-indigo-600 transition-transform duration-300 ease-out"
                ></span>
              </Link>
              <Link
                onClick={onVendorClick}
                onMouseEnter={() => setIsClientsOpen(true)}
                onMouseLeave={() => setIsClientsOpen(false)}
                className="text-gray-800 relative hover:text-indigo-600 hover:cursor-pointer px-0 py-1 rounded-md text-md font-medium"
              >
                Vendors
                <span
                  style={{
                    transform: isClientsOpen ? "scaleX(1)" : "scaleX(0)",
                  }}
                  className="absolute origin-left -bottom-1 -left-2 -right-2 h-1 rounded-full bg-indigo-600 transition-transform duration-300 ease-out"
                ></span>
              </Link>
              <Link
                onClick={handleCareersClick}
                onMouseEnter={() => setIsCareersOpen(true)}
                onMouseLeave={() => setIsCareersOpen(false)}
                className="text-gray-800 relative hover:text-indigo-600 hover:cursor-pointer px-0 py-1 rounded-md text-md font-medium"
              >
                Careers
                <span
                  style={{
                    transform: isCareersOpen ? "scaleX(1)" : "scaleX(0)",
                  }}
                  className="absolute origin-left -bottom-1 -left-2 -right-2 h-1 rounded-full bg-indigo-600 transition-transform duration-300 ease-out"
                ></span>
              </Link>
              <Link
                onClick={handleAboutClick}
                onMouseEnter={() => setIsAboutOpen(true)}
                onMouseLeave={() => setIsAboutOpen(false)}
                className="text-gray-800 relative hover:text-indigo-600 hover:cursor-pointer px-0 py-1 rounded-md text-md font-medium"
              >
                About Us
                <span
                  style={{ transform: isAboutOpen ? "scaleX(1)" : "scaleX(0)" }}
                  className="absolute origin-left -bottom-1 -left-2 -right-2 h-1 rounded-full bg-indigo-600 transition-transform duration-300 ease-out"
                ></span>
              </Link>
              {/* <Link
                onClick={handleUiClick}
                onMouseEnter={() => setIsUiOpen(true)}
                onMouseLeave={() => setIsUiOpen(false)}
                className="text-gray-800 relative hover:text-indigo-600 hover:cursor-pointer px-0 py-1 rounded-md text-md font-medium"
              >
                Ui
                <span
                  style={{
                    transform: isUiOpen ? "scaleX(1)" : "scaleX(0)",
                  }}
                  className="absolute origin-left -bottom-1 -left-2 -right-2 h-1 rounded-full bg-indigo-600 transition-transform duration-300 ease-out"
                ></span>
              </Link> */}
              <Link
                onClick={handleScrollContact}
                onMouseEnter={() => setIsContactOpen(true)}
                onMouseLeave={() => setIsContactOpen(false)}
                className="text-gray-800 relative hover:text-indigo-600 hover:cursor-pointer px-0 py-1 rounded-md text-md font-medium"
              >
                Contact Us
                <span
                  style={{
                    transform: isContactOpen ? "scaleX(1)" : "scaleX(0)",
                  }}
                  className="absolute origin-left -bottom-1 -left-2 -right-2 h-1 rounded-full bg-indigo-600 transition-transform duration-300 ease-out"
                ></span>
              </Link>
            </div>
          </div>
          <div className="hidden md:block">
            {/* <span onClick={handleAdmin} className="me-2 font-medium text-gray-800 cursor-pointer hover:text-indigo-500">Admin</span> */}
            <button
              onClick={() => navigate("/login")}
              className="bg-transparent text-gray-800 hover:cursor-pointer border border-gray-800 hover:border-none hover:bg-indigo-600 hover:text-white w-28 py-2 rounded-md text-sm font-medium mr-2"
            >
              Login
            </button>
          </div>

          <div className="md:hidden">
            <button
              onClick={() => setIsOpen(!isOpen)}
              className="inline-flex items-center justify-center p-2 rounded-md text-white hover:text-black hover:cursor-pointer focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
            >
              {isOpen ? (
                <X className="h-6 w-6 text-gray-700" />
              ) : (
                <Menu className="h-6 w-6 text-gray-700" />
              )}
            </button>
          </div>
        </div>
      </div>
      <MobileDrawer isOpen={isOpen} setIsOpen={setIsOpen} />
    </nav>
  );
};

export default Navbar;
